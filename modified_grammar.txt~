program: preProcessorDirective externDeclaration mainFunction

preProcessorDirective: hashOperator include < header_file >  preProcessorDirective 
					| #define identifier number preProcessorDirective 
					| e

headerFile: identifer '.h'

externDeclaration: extern declarationStatement ;

declarationStatement: dataType variable

optionalDeclarationStatement:	dataType variable 
								| e

variable: identifier variableDash

variableDash: , identifier variableDash 
				| e

mainFunction: int main_dash

mainDash: main(){statements} 
		  | main(int argc, char *argv[]){statements}


statements:	optDeclarationStatement ; statements
			| initializationStatement ; statements
			| assignmentStatement ; statements
			| do{statements} while(condition); statements
			| e
			


initializationStatement: dataType initstat 
						 | e

initstat: identifier assignmentOperator E 
			| multipleInitialization


multipleInitialization: identifier assignmentOperator E multinit

multinit : , multipleInitialization 
				| e

assignmentStatement: identifier assignmentOperator E
						| e

condition: E relationalOperator E 
			| E logicalOperator E 
			| true 
			| false

E: F E1

E1: + F E1 
		| e

F: G F1

F1: - G F1 
		| e

G: H G1

G1: * H G1 
		| e

H: I H1

H1: / I H1 
		| e

I: J I1

I1: ++ J I1
		| e

J: K J1

J1: -- K J1
		| e
		
K: - K
	| identifier 
	| number

relationalOperator: < | > | <= | >= | == | !=

logicalOperator: && | || | !




















elif(token_type == "incrementOperator" and tv == "++"):
	
		token = lexer()
		token_type = list(token.keys())[0]
		token_value = list(token.values())[0]
		
		if(not(token_type == "identifier")):
		
			print("Syntax error: expected 'Identifier' but received " + str(token_value) + "\n")
			status = 1	
			
	elif(token_type == "decrementOperator" and tv == "--"):
	
		token = lexer()
		token_type = list(token.keys())[0]
		token_value = list(token.values())[0]
		
		if(not(token_type == "identifier")):
		
			print("Syntax error: expected 'Identifier' but received " + str(token_value) + "\n")
			status = 1	
		
			
	elif(token_type == "identifier"):
	
		token = lexer()
		token_type = list(token.keys())[0]
		token_value = list(token.values())[0]
		
		if(not(token_type == "decrementOperator" or token_type == "incrementOperator")):
		
			print("Syntax error: expected 'Increment/Decrement Operator' but received " + str(token_value) + "\n")
			status = 1








